{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport PermissionsAndroid from \"react-native-web/dist/exports/PermissionsAndroid\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport MapView, { Marker, Polygon } from \"react-native-maps\";\nimport MapViewDirections from \"react-native-maps-directions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectCurrentLocation, selectDestination, selectOrigin, setTravelTimeInformation } from \"../../slices/navSlice\";\nimport tw from \"twrnc\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nGOOGLE_MAPS_APIKEY = \"AIzaSyCfacCZ8-nf1bwKN96-6u0KUCFre34dm9A\";\nvar screen = Dimensions.get('window');\nvar ASPECT_RATIO = screen.width / screen.height;\nvar LATITUDE_DELTA = 0.04;\nvar LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;\n\nvar Map = function Map() {\n  var mapRef = useRef(null);\n  var currentlocation = useSelector(selectCurrentLocation);\n  var origin = useSelector(selectOrigin);\n  var destination = useSelector(selectDestination);\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (!origin || !destination) return;\n    mapRef.current.fitToSuppliedMarkers([\"origin\", \"destination\"], {\n      edgePadding: {\n        top: 50,\n        right: 50,\n        bottom: 50,\n        left: 50\n      }\n    });\n  }, [origin, destination]);\n  useEffect(function () {\n    var getTravelTime = function getTravelTime() {\n      return _regeneratorRuntime.async(function getTravelTime$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!origin || !destination)) {\n                _context.next = 2;\n                break;\n              }\n\n              return _context.abrupt(\"return\");\n\n            case 2:\n              fetch(\"https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=\" + origin.description + \"&destinations=\" + destination.description + \"&key=\" + GOOGLE_MAPS_APIKEY).then(function (res) {\n                return res.json();\n              }).then(function (data) {\n                dispatch(setTravelTimeInformation(data.rows[0].elements[0]));\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getTravelTime();\n  }, [origin, destination, GOOGLE_MAPS_APIKEY]);\n  return _jsxs(MapView, {\n    onPress: Keyboard.dismiss,\n    onPanDrag: Keyboard.dismiss,\n    initialRegion: {\n      latitude: origin.location.lat,\n      longitude: origin.location.lng,\n      latitudeDelta: LATITUDE_DELTA,\n      longitudeDelta: LONGITUDE_DELTA\n    },\n    ref: mapRef,\n    onRegionChangeComplete: function _callee(val) {\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = console;\n              _context2.next = 3;\n              return _regeneratorRuntime.awrap(mapRef.current.getMapBoundaries());\n\n            case 3:\n              _context2.t1 = _context2.sent;\n\n              _context2.t0.log.call(_context2.t0, 'region boundries', _context2.t1);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    style: tw(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"flex-1\"]))),\n    mapType: \"mutedStandard\",\n    children: [origin && destination && _jsx(MapViewDirections, {\n      origin: origin.description,\n      destination: destination.description,\n      apikey: GOOGLE_MAPS_APIKEY,\n      strokeWidth: 3,\n      strokeColor: \"black\"\n    }), (origin == null ? void 0 : origin.location) && _jsx(Marker, {\n      coordinate: {\n        latitude: origin.location.lat,\n        longitude: origin.location.lng\n      },\n      title: \"Origin\",\n      description: origin.description,\n      identifier: \"origin\"\n    }), (destination == null ? void 0 : destination.location) && _jsx(Marker, {\n      coordinate: {\n        latitude: destination.location.lat,\n        longitude: destination.location.lng\n      },\n      title: \"Destination\",\n      description: destination.description,\n      identifier: \"destination\"\n    })]\n  });\n};\n\nexport default Map;\nvar styles = StyleSheet.create({});","map":{"version":3,"names":["React","useEffect","useRef","useState","MapView","Marker","Polygon","MapViewDirections","useDispatch","useSelector","selectCurrentLocation","selectDestination","selectOrigin","setTravelTimeInformation","tw","GOOGLE_MAPS_APIKEY","screen","Dimensions","get","ASPECT_RATIO","width","height","LATITUDE_DELTA","LONGITUDE_DELTA","Map","mapRef","currentlocation","origin","destination","dispatch","current","fitToSuppliedMarkers","edgePadding","top","right","bottom","left","getTravelTime","fetch","description","then","res","json","data","rows","elements","Keyboard","dismiss","latitude","location","lat","longitude","lng","latitudeDelta","longitudeDelta","val","console","getMapBoundaries","log","styles","StyleSheet","create"],"sources":["/Users/dee/Desktop/WF/components/RideandMap/Map.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport {\n  Keyboard, StyleSheet,\n  View, TouchableOpacity, PermissionsAndroid,\n  Image, Dimensions, Platform, Text, Alert,\n} from \"react-native\";\n//import Geolocation from 'react-native-geolocation-service';\nimport MapView, { Marker, Polygon } from \"react-native-maps\";\nimport MapViewDirections from \"react-native-maps-directions\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  selectCurrentLocation,\n  selectDestination,\n  selectOrigin,\n  setTravelTimeInformation,\n} from \"../../slices/navSlice\";\nimport tw from \"twrnc\";\n//import { GOOGLE_MAPS_APIKEY } from \"@env\";\nGOOGLE_MAPS_APIKEY = \"AIzaSyCfacCZ8-nf1bwKN96-6u0KUCFre34dm9A\";\n\nconst screen = Dimensions.get('window');\nconst ASPECT_RATIO = screen.width / screen.height;\nconst LATITUDE_DELTA = 0.04;\nconst LONGITUDE_DELTA = LATITUDE_DELTA * ASPECT_RATIO;\n\nconst Map = () => {\n  const mapRef = useRef(null);\n  const currentlocation = useSelector(selectCurrentLocation);\n  const origin = useSelector(selectOrigin);\n  const destination = useSelector(selectDestination);\n  const dispatch = useDispatch();\n  //console.log('current===', currentlocation);\n  useEffect(() => {\n    if (!origin || !destination) return;\n    // Zoom & fit to markers\n    mapRef.current.fitToSuppliedMarkers([\"origin\", \"destination\"], {\n      edgePadding: { top: 50, right: 50, bottom: 50, left: 50 },\n    });\n  }, [origin, destination]);\n\n  useEffect(() => {\n    const getTravelTime = async () => {\n      if (!origin || !destination) return;\n      fetch(\n        `https://maps.googleapis.com/maps/api/distancematrix/json?units=imperial&origins=${origin.description}&destinations=${destination.description}&key=${GOOGLE_MAPS_APIKEY}`\n      )\n        .then((res) => res.json())\n        .then((data) => {\n          dispatch(setTravelTimeInformation(data.rows[0].elements[0]));\n        });\n    };\n\n    getTravelTime();\n  }, [origin, destination, GOOGLE_MAPS_APIKEY]);\n  return (\n    <MapView\n      onPress={Keyboard.dismiss}\n      onPanDrag={Keyboard.dismiss}\n      initialRegion={{\n        latitude: origin.location.lat,\n        longitude: origin.location.lng,\n        latitudeDelta: LATITUDE_DELTA,\n        longitudeDelta: LONGITUDE_DELTA,\n      }}\n      ref={mapRef}\n      onRegionChangeComplete={async (val) => {\n        console.log('region boundries', await mapRef.current.getMapBoundaries())\n      }}\n      style={tw`flex-1`}\n      mapType=\"mutedStandard\"\n    >\n      {origin && destination && (\n        <MapViewDirections\n          origin={origin.description}\n          destination={destination.description}\n          apikey={GOOGLE_MAPS_APIKEY}\n          strokeWidth={3}\n          strokeColor=\"black\"\n        />\n      )}\n\n      {origin?.location && (\n        <Marker\n          coordinate={{\n            latitude: origin.location.lat,\n            longitude: origin.location.lng,\n          }}\n          title=\"Origin\"\n          description={origin.description}\n          identifier=\"origin\"\n        />\n      )}\n\n      {destination?.location && (\n        <Marker\n          coordinate={{\n            latitude: destination.location.lat,\n            longitude: destination.location.lng,\n          }}\n          title=\"Destination\"\n          description={destination.description}\n          identifier=\"destination\"\n        />\n      )}\n    </MapView>\n  );\n};\n\nexport default Map;\n\nconst styles = StyleSheet.create({});\n\n\n\n\n\n\n\n\n// const Map = () => {\n//     const mapRef = useRef()\n//     const markerRef = useRef()\n//     const navigation = useNavigation();\n\n//     const [state, setState] = useState({\n//         curLoc: {\n//             latitude: 30.7046,\n//             longitude: 77.1025,\n//         },\n//         destinationCords: {},\n//         isLoading: false,\n//         coordinate: new AnimatedRegion({\n//             latitude: 30.7046,\n//             longitude: 77.1025,\n//             latitudeDelta: LATITUDE_DELTA,\n//             longitudeDelta: LONGITUDE_DELTA\n//         }),\n//         time: 0,\n//         distance: 0,\n//         heading: 0\n\n//     })\n\n//     const { curLoc, time, distance, destinationCords, isLoading, coordinate,heading } = state\n//     const updateState = (data) => setState((state) => ({ ...state, ...data }));\n\n//     const getLiveLocation = async () => {\n//         const locPermission = await locationPermission()\n//         console.log('locpermission====',locPermission)\n//         if (locPermission) {\n//             const { latitude, longitude, heading } = await getorigin()\n//             console.log(\"get live location after 4 second\",heading)\n//             animate(latitude, longitude);\n//             updateState({\n//                 heading: heading,\n//                 curLoc: { latitude, longitude },\n//                 coordinate: new AnimatedRegion({\n//                     latitude: latitude,\n//                     longitude: longitude,\n//                     latitudeDelta: LATITUDE_DELTA,\n//                     longitudeDelta: LONGITUDE_DELTA\n//                 })\n//             })\n//         }\n//     }\n\n    // useEffect(() => {\n    //     const interval = setInterval(() => {\n    //         getLiveLocation()\n    //     }, 6000);\n    //     return () => clearInterval(interval)\n    // }, [])\n\n//     const onPressLocation = () => {\n//         navigation.navigate('chooseLocation', { getCordinates: fetchValue })\n//     }\n//     const fetchValue = (data) => {\n//         console.log(\"this is data\", data)\n//         updateState({\n//             destinationCords: {\n//                 latitude: data.destinationCords.latitude,\n//                 longitude: data.destinationCords.longitude,\n//             }\n//         })\n//     }\n\n//     const animate = (latitude, longitude) => {\n//         const newCoordinate = { latitude, longitude };\n//         if (Platform.OS == 'android') {\n//             if (markerRef.current) {\n//                 markerRef.current.animateMarkerToCoordinate(newCoordinate, 7000);\n//             }\n//         } else {\n//             coordinate.timing(newCoordinate).start();\n//         }\n//     }\n\n//     const onCenter = () => {\n//         mapRef.current.animateToRegion({\n//             latitude: curLoc.latitude,\n//             longitude: curLoc.longitude,\n//             latitudeDelta: LATITUDE_DELTA,\n//             longitudeDelta: LONGITUDE_DELTA\n//         })\n//     }\n\n//     const fetchTime = (d, t) => {\n//         updateState({\n//             distance: d,\n//             time: t\n//         })\n//     }\n\n//     return (\n//         <View style={styles.container}>\n\n//             {distance !== 0 && time !== 0 && (<View style={{ alignItems: 'center', marginVertical: 16 }}>\n//                 <Text>Time left: {time.toFixed(0)} </Text>\n//                 <Text>Distance left: {distance.toFixed(0)}</Text>\n//             </View>)}\n//             <View style={{ flex: 1 }}>\n//                 <MapView\n//                     ref={mapRef}\n//                     style={StyleSheet.absoluteFill}\n//                     initialRegion={{\n//                         ...curLoc,\n//                         latitudeDelta: LATITUDE_DELTA,\n//                         longitudeDelta: LONGITUDE_DELTA,\n//                     }}\n//                 >\n\n//                     <Marker.Animated\n//                         ref={markerRef}\n//                         coordinate={coordinate}\n//                     >\n//                         <Image\n//                             source={imagePath.icBike}\n//                             style={{\n//                                 width: 40,\n//                                 height: 40,\n//                                 transform: [{rotate: `${heading}deg`}]\n//                             }}\n//                             resizeMode=\"contain\"\n//                         />\n//                     </Marker.Animated>\n\n//                     {Object.keys(destinationCords).length > 0 && (<Marker\n//                         coordinate={destinationCords}\n//                         image={imagePath.icGreenMarker}\n//                     />)}\n\n//                     {Object.keys(destinationCords).length > 0 && (<MapViewDirections\n//                         origin={curLoc}\n//                         destination={destinationCords}\n//                         apikey={GOOGLE_MAP_KEY}\n//                         strokeWidth={6}\n//                         strokeColor=\"red\"\n//                         optimizeWaypoints={true}\n//                         onStart={(params) => {\n//                             console.log(`Started routing between \"${params.origin}\" and \"${params.destination}\"`);\n//                         }}\n//                         onReady={result => {\n//                             console.log(`Distance: ${result.distance} km`)\n//                             console.log(`Duration: ${result.duration} min.`)\n//                             fetchTime(result.distance, result.duration),\n//                                 mapRef.current.fitToCoordinates(result.coordinates, {\n//                                     edgePadding: {\n//                                         // right: 30,\n//                                         // bottom: 300,\n//                                         // left: 30,\n//                                         // top: 100,\n//                                     },\n//                                 });\n//                         }}\n//                         onError={(errorMessage) => {\n//                             // console.log('GOT AN ERROR');\n//                         }}\n//                     />)}\n//                 </MapView>\n//                 <TouchableOpacity\n//                     style={{\n//                         position: 'absolute',\n//                         bottom: 0,\n//                         right: 0\n//                     }}\n//                     onPress={onCenter}\n//                 >\n//                     <Image source={imagePath.greenIndicator} />\n//                 </TouchableOpacity>\n//             </View>\n//             <View style={styles.bottomCard}>\n//                 <Text>Where are you going..?</Text>\n//                 <TouchableOpacity\n//                     onPress={onPressLocation}\n//                     style={styles.inpuStyle}\n//                 >\n//                     <Text>Choose your location</Text>\n//                 </TouchableOpacity>\n//             </View>\n//             {/* <Loader isLoading={isLoading} /> */}\n//         </View>\n//     );\n// };\n\n// const styles = StyleSheet.create({\n//     container: {\n//         flex: 1,\n//     },\n//     bottomCard: {\n//         backgroundColor: 'white',\n//         width: '100%',\n//         padding: 30,\n//         borderTopEndRadius: 24,\n//         borderTopStartRadius: 24\n//     },\n//     inpuStyle: {\n//         backgroundColor: 'white',\n//         borderRadius: 4,\n//         borderWidth: 1,\n//         alignItems: 'center',\n//         height: 48,\n//         justifyContent: 'center',\n//         marginTop: 16\n//     }\n// });\n\n// export default Map;\n\n\n\n\n\n\n// import * as Location from 'expo-location';\n\n// export default function Map() {\n//   const [location, setLocation] = useState(null);\n//   const [errorMsg, setErrorMsg] = useState(null);\n\n//   useEffect(() => {\n//     (async () => {\n//       let { status } = await Location.requestForegroundPermissionsAsync();\n//       if (status !== 'granted') {\n//         setErrorMsg('Permission to access location was denied');\n//         return;\n//       }\n\n//       let location = await Location.getCurrentPositionAsync({});\n//       setLocation(location);\n//     })();\n//   }, []);\n\n//   let text = 'Waiting..';\n//   if (errorMsg) {\n//     text = errorMsg;\n//   } else if (location) {\n//     text = JSON.stringify(location);\n//   }\n\n//   return (\n//     <View >\n//       <Text>{text}</Text>\n//     </View>\n//   );\n// }\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}